"use strict";"production"!==process.env.NODE_ENV&&function(){function e(){}function s(e,t){return"font"===e?"":"string"==typeof t?"use-credentials"===t?t:"":void 0}function a(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":'something with type "'+typeof e+'"'}function p(e){return null===e?"`null`":void 0===e?"`undefined`":""===e?"an empty string":"string"==typeof e?JSON.stringify(e):"number"==typeof e?"`"+e+"`":'something with type "'+typeof e+'"'}var t=require("react"),c={d:{f:e,r:function(){throw Error("Invalid form element. requestFormReset must be passed a form that was rendered by React.")},D:e,C:e,L:e,m:e,X:e,S:e,M:e},p:0,findDOMNode:null};if(!t.__SERVER_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE)throw Error('The "react" package in this environment is not configured correctly. The "react-server" condition must be enabled in any environment that runs React Server Components.');"function"==typeof Map&&null!=Map.prototype&&"function"==typeof Map.prototype.forEach&&"function"==typeof Set&&null!=Set.prototype&&"function"==typeof Set.prototype.clear&&"function"==typeof Set.prototype.forEach||console.error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),exports.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE=c,exports.preconnect=function(e,t){"string"==typeof e&&e?null!=t&&"object"!=typeof t?console.error("ReactDOM.preconnect(): Expected the `options` argument (second) to be an object but encountered %s instead. The only supported option at this time is `crossOrigin` which accepts a string.",p(t)):null!=t&&"string"!=typeof t.crossOrigin&&console.error("ReactDOM.preconnect(): Expected the `crossOrigin` option (second argument) to be a string but encountered %s instead. Try removing this option or passing a string value instead.",a(t.crossOrigin)):console.error("ReactDOM.preconnect(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&(t=t?"string"==typeof(t=t.crossOrigin)?"use-credentials"===t?t:"":void 0:null,c.d.C(e,t))},exports.prefetchDNS=function(e){var t;"string"==typeof e&&e?1<arguments.length&&("object"==typeof(t=arguments[1])&&t.hasOwnProperty("crossOrigin")?console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. It looks like the you are attempting to set a crossOrigin property for this DNS lookup hint. Browsers do not perform DNS queries using CORS and setting this attribute on the resource hint has no effect. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",p(t)):console.error("ReactDOM.prefetchDNS(): Expected only one argument, `href`, but encountered %s as a second argument instead. This argument is reserved for future options and is currently disallowed. Try calling ReactDOM.prefetchDNS() with just a single string argument, `href`.",p(t))):console.error("ReactDOM.prefetchDNS(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&c.d.D(e)},exports.preinit=function(e,t){var r,n,o,i;"string"==typeof e&&e?null==t||"object"!=typeof t?console.error("ReactDOM.preinit(): Expected the `options` argument (second) to be an object with an `as` property describing the type of resource to be preinitialized but encountered %s instead.",p(t)):"style"!==t.as&&"script"!==t.as&&console.error('ReactDOM.preinit(): Expected the `as` property in the `options` argument (second) to contain a valid value describing the type of resource to be preinitialized but encountered %s instead. Valid values for `as` are "style" and "script".',p(t.as)):console.error("ReactDOM.preinit(): Expected the `href` argument (first) to be a non-empty string but encountered %s instead.",a(e)),"string"==typeof e&&t&&"string"==typeof t.as&&(n=s(r=t.as,t.crossOrigin),o="string"==typeof t.integrity?t.integrity:void 0,i="string"==typeof t.fetchPriority?t.fetchPriority:void 0,"style"===r?c.d.S(e,"string"==typeof t.precedence?t.precedence:void 0,{crossOrigin:n,integrity:o,fetchPriority:i}):"script"===r&&c.d.X(e,{crossOrigin:n,integrity:o,fetchPriority:i,nonce:"string"==typeof t.nonce?t.nonce:void 0}))},exports.preinitModule=function(e,t){var r="";"string"==typeof e&&e||(r+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?r+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"script"!==t.as&&(r+=" The `as` option encountered was "+p(t.as)+"."),r?console.error("ReactDOM.preinitModule(): Expected up to two arguments, a non-empty `href` string and, optionally, an `options` object with a valid `as` property.%s",r):"script"!==(r=t&&"string"==typeof t.as?t.as:"script")&&(r=p(r),console.error('ReactDOM.preinitModule(): Currently the only supported "as" type for this function is "script" but received "%s" instead. This warning was generated for `href` "%s". In the future other module types will be supported, aligning with the import-attributes proposal. Learn more here: (https://github.com/tc39/proposal-import-attributes)',r,e)),"string"==typeof e&&("object"==typeof t&&null!==t?null!=t.as&&"script"!==t.as||(r=s(t.as,t.crossOrigin),c.d.M(e,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0})):null==t&&c.d.M(e))},exports.preload=function(e,t){var r,n="";"string"==typeof e&&e||(n+=" The `href` argument encountered was "+a(e)+"."),null==t||"object"!=typeof t?n+=" The `options` argument encountered was "+a(t)+".":"string"==typeof t.as&&t.as||(n+=" The `as` option encountered was "+a(t.as)+"."),n&&console.error('ReactDOM.preload(): Expected two arguments, a non-empty `href` string and an `options` object with an `as` property valid for a `<link rel="preload" as="..." />` tag.%s',n),"string"==typeof e&&"object"==typeof t&&null!==t&&"string"==typeof t.as&&(r=s(n=t.as,t.crossOrigin),c.d.L(e,n,{crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0,nonce:"string"==typeof t.nonce?t.nonce:void 0,type:"string"==typeof t.type?t.type:void 0,fetchPriority:"string"==typeof t.fetchPriority?t.fetchPriority:void 0,referrerPolicy:"string"==typeof t.referrerPolicy?t.referrerPolicy:void 0,imageSrcSet:"string"==typeof t.imageSrcSet?t.imageSrcSet:void 0,imageSizes:"string"==typeof t.imageSizes?t.imageSizes:void 0,media:"string"==typeof t.media?t.media:void 0}))},exports.preloadModule=function(e,t){var r="";"string"==typeof e&&e||(r+=" The `href` argument encountered was "+a(e)+"."),void 0!==t&&"object"!=typeof t?r+=" The `options` argument encountered was "+a(t)+".":t&&"as"in t&&"string"!=typeof t.as&&(r+=" The `as` option encountered was "+a(t.as)+"."),r&&console.error('ReactDOM.preloadModule(): Expected two arguments, a non-empty `href` string and, optionally, an `options` object with an `as` property valid for a `<link rel="modulepreload" as="..." />` tag.%s',r),"string"==typeof e&&(t?(r=s(t.as,t.crossOrigin),c.d.m(e,{as:"string"==typeof t.as&&"script"!==t.as?t.as:void 0,crossOrigin:r,integrity:"string"==typeof t.integrity?t.integrity:void 0})):c.d.m(e))},exports.version="19.0.0"}();
